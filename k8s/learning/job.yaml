apiVersion: batch/v1
kind: Job
metadata:
  name: pi
spec:
  parallelism: 2 #指定了这个 Job 最大的并行数是 2
  completions: 4 #最小的完成数是
  template: # Pod 模板
    spec:
      containers:
        - name: pi
          image: resouer/ubuntu-bc  # 定义了一个 Ubuntu 镜像的容器（准确地说，是一个安装了 bc 命令的 Ubuntu 镜像）
          command: ["sh", "-c", "echo 'scale=10000; 4*a(1)' | bc -l "]
      restartPolicy: Never # 事实上，restartPolicy 在 Job 对象里只允许被设置为 Never 和 OnFailure；而在 Deployment 对象里，restartPolicy 则只允许被设置为 Always。
  backoffLimit: 4  # restartPolicy=Never，定义了重试次数为 4（即，backoffLimit=4），而这个字段的默认值是 6,不断地尝试创建一个新 Pod;定义的 restartPolicy=OnFailure，那么离线作业失败后，Job Controller 就不会去尝试创建新的 Pod。但是，它会不断地尝试重启 Pod 里的容器。
  activeDeadlineSeconds: 100 #设置最长运行时间





1、跟其他控制器不同的是，Job 对象并不要求你定义一个 spec.selector 来描述要控制哪些 Pod。

2、在 Job 对象中，负责并行控制的参数有两个：
  spec.parallelism，它定义的是一个 Job 在任意时间最多可以启动多少个 Pod 同时运行；
  spec.completions，它定义的是 Job 至少要完成的 Pod 数目，即 Job 的最小完成数。

3、Job Controller 的工作原理
    首先，Job Controller 控制的对象，直接就是 Pod。
    其次，Job Controller 在控制循环中进行的调谐（Reconcile）操作，是根据实际在 Running 状态 Pod 的数目、已经成功退出的 Pod 的数目，
  以及 parallelism、completions 参数的值共同计算出在这个周期里，应该创建或者删除的 Pod 数目，然后调用 Kubernetes API 来执行这个
  操作。












