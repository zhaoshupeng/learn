apiVersion: apps/v1
kind: Deployment # Deployment，是一个定义多副本应用(即多个副本 Pod)的对象
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  strategy:
    type: RollingUpdate  # type==RollingUpdate时，采取 滚动更新的方式更新 Pods。
    rollingUpdate:
      maxSurge: 1  #一个可选字段，用来指定可以创建的超出期望Pod个数的Pod数量。百分比值会通过向上取整转换为绝对数。 此字段的默认值为 25%。
      maxUnavailable: 1 #是一个可选字段，用来指定 更新过程中不可用的 Pod 的个数上限。百分比值会转换成绝对数并去除小数部分,maxSurge 为 0，则此值不能为 0。 默认值为 25%。
  revisionHistoryLimit: 8 #是一个可选字段，用来设定出于回滚目的所要保留的旧 ReplicaSet 数量。 默认情况下，系统保留 10 个旧 ReplicaSet，但其理想值取决于新 Deployment 的频率和稳定性。

  template: # 定义了一个 Pod 模版(spec.template)，这个模版描述了我想要创建的 Pod 的细节。
    metadata: # 每一个 API 对象都有一个叫作 Metadata 的字段，这个字段就是 API 对象 的“标识”，即元数据，它也是我们从 Kubernetes 里找到这个对象的主要依据。这其中最主要使 用到的字段是 Labels。
      labels:
        app: nginx
    spec:
      shareProcessNamespace: true # 意味着这个 Pod 里的容器要共享 PID Namespace。
      hostAliases: # 使用 HostAliases 向 Pod /etc/hosts 文件添加条目;由 Kubelet 管理，并且 可以在 Pod 创建/重启过程中被重写。
        - ip: "127.0.0.1"
          hostnames:
            - "foo.local"
            - "bar.local"
      containers:
        - name: nginx
          image: nginx:1.20.1
          ports:
            - containerPort: 80
          livenessProbe: #pod内容器健康检查的设置，在容器启动后执行；当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可
            httpGet: #通过httpget检查健康，返回200-399之间，则认为容器正常
              path: / #URI地址
              port: 80
              #host: 127.0.0.1 #主机地址
              scheme: HTTP
            #          HttpHeaders:
            #            - name: string
            #              value: string
            initialDelaySeconds: 180 #表明第一次检测在容器启动后多长时间后开始，单位为秒
            timeoutSeconds: 5 #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒
            periodSeconds: 15  #检查间隔时间，对容器监控检查的定期探测时间设置，单位秒，默认10秒一次
          volumeMounts: # Pod 中的容器，使用的是 volumeMounts 字段来声明自己要挂载哪个 Volume，并通过 mountPath 字段来定义容器内的 Volume 目录
            - mountPath: "/usr/share/nginx/vol"
              name: nginx-vol-empty-dir # 注意名称中不能出现驼峰
            - mountPath: "/data" # 容器中本身不存在这个目录，会自动创建
              name: nginx-vol-host-path

        - name: shell  # 一个是开启了 tty 和 stdin 的 shell 容器。
          image: busybox
          securityContext: # 安全上下文（Security Context）定义 Pod 或 Container 的特权与访问控制设置。
            capabilities:
              add:
                - SYS_PTRACE  # 可以在其他容器中对进程发出信号。例如，发送 SIGHUP 到 nginx 以重启工作进程。这需要 SYS_PTRACE 功能。
          stdin: true
          tty: true

      volumes:
        - name: nginx-vol-empty-dir
          emptyDir: {} # emptyDir 类型，它其实就等同于我们之前讲过的 Docker 的隐式 Volume 参数，即:不显式声明宿主机目录的 Volume。所以，Kubernetes 也会在宿主机上创建一个临时目录，这个目录将来就会被绑定挂载到 容器所声明的 Volume 目录上。
        - name: nginx-vol-host-path
          hostPath: # Kubernetes 也提供了显式的 Volume 定义，它叫做 hostPath。
            path: /home/zhaoshupeng/logs











