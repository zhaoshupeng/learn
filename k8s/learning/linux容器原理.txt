
1、
    Linux 容器的原理、分析了 Docker 容器的本质，终 于，“Namespace 做隔离，Cgroups 做限制，rootfs 做文件系统”

2、
    (1)容器的本质到底是什么?
        容器的本质是进程。
    (2)容器的“单进程模型”
        容器的“单进程模型”，并不是指容器里只能运行“一个”进程，而是指容器没 有管理多个进程的能力。这是因为容器里
      PID=1 的进程就是应用本身，其他的进程都是这个 PID=1 进程的子进程。
3、为什么需要pod?
    (1) 原因一: 处理“超亲密关系”这样的调度问题
        Kubernetes 项目里，Pod 是 Kubernetes 里的原子调度单位。这就意味着，Kubernetes 项目的调度器，
    是统一按照 Pod 而非容器的资源需求进行计算的。
        Pod 中的容器间的紧密协作，我们可以称为“超亲密关系”。这些具有“超亲密关系”容器的典型特征包括但不限于:互相之间会发生直接的文件交换、
    使用 localhost 或者 Socket 文件进行本地通 信、会发生非常频繁的远程调用、需要共享某些 Linux Namespace(比如，一个容器要加入另一
    个 容器的 Network Namespace)等等。（并不是所有有“关系”的容器都属于同一个 Pod。比如，PHP 应用容器和 MySQL）

    (2) 原因二: 容器设计模式
        Pod 在 Kubernetes 项目里还有更重要的意义，那就是:容器设计模式。
        Pod 这种“超亲密关系”容器的设计思想，实际上就是希望，当用户想在一个容器里跑多个功能并不相关的应用时，应该优先考虑它们是不是更
     应该被描述成一个 Pod 里的多个容器。

4、Pod 的实现原理
        首先，关于 Pod 最重要的一个事实是:它只是一个逻辑概念。
        也就是说，Kubernetes 真正处理的，还是宿主机操作系统上 Linux 容器的 Namespace 和 Cgroups，而并不存在一个
    所谓的 Pod 的边界或者隔离环境。

    (1) Pod 又是怎么被“创建”出来的呢?
        答案是:Pod，其实是一组共享了某些资源的容器。
        具体的说:Pod 里的所有容器，共享的是同一个 Network Namespace，并且可以声明共享同一个 Volume。(经验证只有一个pod里面有多个容器时才会有共享容器)
        在 Kubernetes 项目里，Pod 的实现需要使用一个中间容器，这个容器叫作 Infra 容器。在 这个 Pod 中，Infra 容器永远都是第一个
    被创建的容器，而其他用户定义的容器，则通过 Join Network Namespace 的方式，与 Infra 容器关联在一起。(为了实现多个容器间的
    关系是对等关系而不是拓扑关系)。Infra 容器占用极少的资源，所以它使用的是一个非常特殊的镜像，叫 作:k8s.gcr.io/pause。这个镜像
    是一个用汇编语言编写的、永远处于“暂停”状态的容器，解 压后的大小也只有 100~200 KB 左右。
        Pod 的生命周期只跟 Infra 容器一致，而与容器 A 和 B 无关。

5、
    sidecar 指的就是我们可以在一个 Pod 中，启动一个辅助容器，来完成一些独立于主进 程(主容器)之外的工作。


6、Pod 对象 在 Kubernetes 中的生命周期
  Pod 生命周期的变化，主要体现在 Pod API 对象的Status 部分，这是它除了 Metadata 和 Spec 之外的第三个重要字段.
        1. Pending。这个状态意味着，Pod 的 YAML 文件已经提交给了 Kubernetes，API 对象已经被 创建并保存在 Etcd 当中。但是，这个 Pod 里有些容器因为某种原因而不能被顺利创建。比 如，调度不成功。
        2. Running。这个状态下，Pod 已经调度成功，跟一个具体的节点绑定。它包含的容器都已经创 建成功，并且至少有一个正在运行中。
        3. Succeeded。这个状态意味着，Pod 里的所有容器都正常运行完毕，并且已经退出了。这种情 况在运行一次性任务时最为常见。
        4. Failed。这个状态下，Pod 里至少有一个容器以不正常的状态(非 0 的返回码)退出。这个状 态的出现，意味着你得想办法 Debug 这个容器的应用，比如查看 Pod 的 Events 和日志。
        5. Unknown。这是一个异常状态，意味着 Pod 的状态不能持续地被 kubelet 汇报给 kube- apiserver，这很有可能是主从节点(Master 和 Kubelet)间的通信出现了问题。
    更进一步地，Pod 对象的 Status 字段，还可以再细分出一组 Conditions。这些细分状态的值包 括:PodScheduled、Ready、Initialized，
  以及 Unschedulable。它们主要用于描述造成当前 Status 的具体原因是什么。


7、PodPreset(Pod 预设置)
    Kubernetes 自动给 Pod 填充某些字段

8、以 Deployment 为例，简单描述一下它对控制器模型的实现:


9、有状态 应用”(Stateful Application)
    尤其是分布式应用，，依赖关系，比如:主从关系、主备关系；数据存储类应用；相互之间有顺序关系。
    StatefulSet 的设计其实非常容易理解。它把真实世界里的应用状态，抽象为了两种情况:
    1. 拓扑状态。这种情况意味着，应用的多个实例之间不是完全对等的关系。这些应用实例，必 须按照某些顺序启动，比如应用的主节点 A 要先于
    从节点 B 启动。并且，新创建出来的 Pod，必须和原来 Pod 的网络标识一样，这样原先的访问者才能使用同样的方法，访问到 这个新 Pod。
    2. 存储状态。这种情况意味着，应用的多个实例分别绑定了不同的存储数据。Pod A 第一次读取到的数据，和隔了十分钟之后再次读取到的数据，
    应该是同一 份，哪怕在此期间 Pod A 被重新创建过。


readinessProbe 检查结果的成功与否，决定的这个 Pod 是不是能被通 过 Service 的方式访问到，而并不影响 Pod 的生命周期。这部分内容，我会留在讲解 Service 时再 重点介绍。

10、Kubernetes v1.7 之后添加了一个 API 对象，名叫ControllerRevision，专门用来记录某种 Controller 对象的版本。
    kubectl get controllerrevision -n kube-system -l name=fluentd-elasticsearch


11、


















