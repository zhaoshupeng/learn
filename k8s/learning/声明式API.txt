1、命令式配置文件操作
    kubectl create -f nginx.yaml
    kubectl replace -f nginx.yaml

    对于上面这种先 kubectl create，再 replace 的操作，我们称为命令式配置文件操作。

2、声明式 API
    kubectl apply 命令。
    (1)它跟 kubectl replace 命令有什么本质区别吗？
        可以简单地理解为，kubectl replace 的执行过程，是使用新的 YAML 文件中的 API 对象，替换原有的 API 对象；而 kubectl apply，
    则是执行了一个对原有 API 对象的 PATCH 操作。
        更进一步地，这意味着 kube-apiserver 在响应命令式请求（比如，kubectl replace）的时候，一次只能处理一个写请求，否则会有产生冲
    突的可能。而对于声明式请求（比如，kubectl apply），一次能处理多个写操作，并且具备 Merge 能力。

3、以 Istio 项目为例，来为你讲解一下声明式 API 在实际使用时的重要意义
        Istio 最根本的组件，是运行在每一个应用 Pod 里的 Envoy 容器（一个高性能 C++ 网络代理）。
        Istio 项目，则把这个代理服务以 sidecar 容器的方式，运行在了每一个被治理的应用 Pod 中。我们知道，Pod 里的所有容器都共享同一个
    Network Namespace。所以，Envoy 容器就能够通过配置 Pod 里的 iptables 规则，把整个 Pod 的进出流量接管下来。
        这时候，Istio 的控制层（Control Plane）里的 Pilot 组件，就能够通过调用每个 Envoy 容器的 API，对这个 Envoy 代理进行配置，
    从而实现微服务治理。
    (1) Admission 的功能
        在 Kubernetes 项目中，当一个 Pod 或者任何一个 API 对象被提交给 APIServer 之后，总有一些“初始化”性质的工作需要在它们被
    Kubernetes 项目正式处理之前进行。比如，自动为所有 Pod 加上某些标签（Labels）。
        而这个“初始化”操作的实现，借助的是一个叫作 Admission 的功能。它其实是 Kubernetes 项目里一组被称为 Admission Controller
    的代码，可以选择性地被编译进 APIServer 中，在 API 对象创建之后会被立刻调用到。
        但这就意味着，如果你现在想要添加一些自己的规则到 Admission Controller，就会比较困难。因为，这要求重新编译并重启 APIServer。
    显然，这种使用方法对 Istio 来说，影响太大了。
        所以，Kubernetes 项目为我们额外提供了一种“热插拔”式的 Admission 机制，它就是 Dynamic Admission Control，也叫作：Initializer。


    (2) Istio 项目明明需要在每个 Pod 里安装一个 Envoy 容器，又怎么能做到“无感”的呢？
        1) Dynamic Admission Control
            实际上，Istio 项目使用的，是 Kubernetes 中的一个非常重要的功能，叫作 Dynamic Admission Control (也叫作：Initializer)。
            Istio 要做的，就是编写一个用来为 Pod“自动注入”Envoy 容器的 Initializer。

            首先，Istio 会将这个 Envoy 容器本身的定义，以 ConfigMap 的方式保存在 Kubernetes 当中。这个 ConfigMap（名叫：envoy-initializer）的定义如下所示：
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: envoy-initializer
            data:
              config: |
                containers:
                  - name: envoy
                    image: lyft/envoy:845747db88f102c0fd262ab234308e9e22f693a1
                    command: ["/usr/local/bin/envoy"]
                    args:
                      - "--concurrency 4"
                      - "--config-path /etc/envoy/envoy.json"
                      - "--mode serve"
                    ports:
                      - containerPort: 80
                        protocol: TCP
                    resources:
                      limits:
                        cpu: "1000m"
                        memory: "512Mi"
                      requests:
                        cpu: "100m"
                        memory: "64Mi"
                    volumeMounts:
                      - name: envoy-conf
                        mountPath: /etc/envoy
                volumes:
                  - name: envoy-conf
                    configMap:
                      name: envoy

            这个 ConfigMap 的 data 部分，正是一个 Pod 对象的一部分定义。
            不难想到，Initializer 要做的工作，就是把这部分 Envoy 相关的字段，自动添加到用户提交的 Pod 的 API 对象里。

        2) 接下来，Istio 将一个编写好的 Initializer，作为一个 Pod 部署在 Kubernetes 中。
            这个 Pod 的定义非常简单，如下所示：
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                app: envoy-initializer
              name: envoy-initializer
            spec:
              containers:
                - name: envoy-initializer
                  image: envoy-initializer:0.0.1 # 是一个事先编写好的“自定义控制器”（Custom Controller）
                  imagePullPolicy: Always

            而 Initializer 的控制器，不断获取到的“实际状态”，就是用户新创建的 Pod。而它的“期望状态”，则是：这个 Pod 里被添加了 Envoy 容器的定义。
            这时候，你应该立刻能想到，Istio 要往这个 Pod 里合并的字段，正是我们之前保存在 envoy-initializer 这个 ConfigMap 里的数据（即：它的 data 字段的值）。
            所以，在 Initializer 控制器的工作逻辑里，它首先会从 APIServer 中拿到这个 ConfigMap。
            然后，把这个 ConfigMap 里存储的 containers 和 volumes 字段，直接添加进一个空的 Pod 对象里。
            现在，关键来了。
            Kubernetes 的 API 库，为我们提供了一个方法，使得我们可以直接使用新旧两个 Pod 对象，生成一个 TwoWayMergePatch：
                func doSomething(pod) {
                  cm := client.Get(ConfigMap, "envoy-initializer")

                  newPod := Pod{}
                  newPod.Spec.Containers = cm.Containers
                  newPod.Spec.Volumes = cm.Volumes

                  // 生成 patch 数据
                  patchBytes := strategicpatch.CreateTwoWayMergePatch(pod, newPod)

                  // 发起 PATCH 请求，修改这个 pod 对象
                  client.Patch(pod.Name, patchBytes)
                }
            有了这个 TwoWayMergePatch 之后，Initializer 的代码就可以使用这个 patch 的数据，调用 Kubernetes 的 Client，
        发起一个 PATCH 请求。
            这样，一个用户提交的 Pod 对象里，就会被自动加上 Envoy 容器相关的字段。
        3）Kubernetes 还允许你通过配置，来指定要对什么样的资源进行这个 Initialize 操作
            apiVersion: admissionregistration.k8s.io/v1alpha1
            kind: InitializerConfiguration
            metadata:
              name: envoy-config
            initializers:
              // 这个名字必须至少包括两个 "."
              - name: envoy.initializer.kubernetes.io
                rules:
                  - apiGroups:
                      - "" // 前面说过， "" 就是 core API Group 的意思
                    apiVersions:
                      - v1
                    resources:
                      - pods
            这个配置，就意味着 Kubernetes 要对所有的 Pod 进行这个 Initialize 操作，并且，我们指定了负责这个操作的 Initializer，名叫：envoy-initializer。
            而一旦这个 InitializerConfiguration 被创建，Kubernetes 就会把这个 Initializer 的名字，加在所有新创建的 Pod 的 Metadata 上，格式如下所示：
                apiVersion: v1
                kind: Pod
                metadata:
                  initializers:
                    pending:
                      - name: envoy.initializer.kubernetes.io
                  name: myapp-pod
                  labels:
                    app: myapp
                ...
            可以看到，每一个新创建的 Pod，都会自动携带了 metadata.initializers.pending 的 Metadata 信息。
            这个 Metadata，正是接下来 Initializer 的控制器判断这个 Pod 有没有执行过自己所负责的初始化操作的重要依据（也就是前面伪代码中 isInitialized() 方法的含义）。

            这也就意味着，当你在 Initializer 里完成了要做的操作后，一定要记得将这个 metadata.initializers.pending 标志清除掉。
        这一点，你在编写 Initializer 代码的时候一定要非常注意。














































