apiVersion: batch/v1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "*/1 * * * *"  # 创建和删除 Job 的依据；Cron 表达式中的五个部分分别代表：分钟、小时、日、月、星期
  jobTemplate:  #CronJob 是一个 Job 对象的控制器（Controller）
    spec:
      template:
        spec:
          containers:
            - name: hello
              image: busybox
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - -c
                - date; echo Hello from the Kubernetes cluster
          restartPolicy: OnFailure




1、CronJob 与 Job 的关系，正如同 Deployment 与 Pod 的关系一样。CronJob 是一个专门用来管理 Job 对象的控制器。

2、需要注意的是，由于定时任务的特殊性，很可能某个 Job 还没有执行完，另外一个新 Job 就产生了。这时候，你可以通过
  spec.concurrencyPolicy 字段来定义具体的处理策略。比如：
    concurrencyPolicy=Allow，这也是默认情况，这意味着这些 Job 可以同时存在；
    concurrencyPolicy=Forbid，这意味着不会创建新的 Pod，该创建周期被跳过；
    concurrencyPolicy=Replace，这意味着新产生的 Job 会替换旧的、没有执行完的 Job。

3、而如果某一次 Job 创建失败，这次创建就会被标记为“miss”。当在指定的时间窗口内，miss 的数目达到 100 时，那么 CronJob 会停止再创建这个 Job。
  这个时间窗口，可以由 spec.startingDeadlineSeconds 字段指定。比如 startingDeadlineSeconds=200，意味着在过去 200 s 里，如果
  miss 的数目达到了 100 次，那么这个 Job 就不会被创建执行了。



